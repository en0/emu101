
EMU101 16 Architecture Brainstorm
════════════════════════════════════════════════════════════════════════════════

This document might be considered the EMU101 architecture whitepaper. The EMU101
is a fictitious system architecture that I created while I was board during the
Covid-19 isolation.

The architecture focuses on simplicity. The primary design driver was that each
instruction could be decoded from a single 16 bit word. This naturally resulted
in a 16 bit system where even the memory unit size is 16 bits.

In the case of this document, a "word" is considered 16 bits of data. There is
no concept of a byte. I agree, this is wierd but it kept things simple.

System Memory 
════════════════════════════════════════════════════════════════════════════════

Single Word Addressing
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

The EMU101 Architecture is different from other systems in that it is not
single byte addressable. Instead, the memory is single word addressable.
A word is 16 bits or 2 bytes. 

As an example, consider the following memory values:

  ┌────┬────┬────┬────┐
  │ 00 │ 01 │ 02 │ 03 │ <- Address
  ┝━━━━┿━━━━┿━━━━┿━━━━┥
  │ABCD│CDEF│0123│4567│ <- Data
  └────┴────┴────┴────┘

The first thing to notice is that each addressed value is 2 bytes long. This is
the effect of the system being single word addressable.

If the system reads the data at address 02, the resulting word is 0x0123
Its value is 0x123. 


Since the smallest unit of memory in this system is 1 word (16 bits), the value
0x0123 is not constructed of 2 bytes but rather 1 word. Furthermore, the system
has no ability to do operations on double words.

As a result, Memory values are in order as read and endianess doesn't apply.

System Memory Map
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   START  │ END    │ Content           │ Size (words)
   ━━━━━━━┿━━━━━━━━┿━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━
   0x0000 │ 0x01FF │ Stack             │ 512
   0x0200 │ 0xEFFF │ General Purpose   │ 59.5k
   0xF000 │ 0xFFFF │ PROG              │ 4k


Instruction Pipeline Loading
════════════════════════════════════════════════════════════════════════════════

Each instruction consists of a single 16 bit word and an optional immediate
word. Each fetch cycle ensures the pipeline has two words loaded.

The Instruction Pointer is moved forward by 1 with each word fetched. The
values are pushed into a queue called the Instruction Pipeline (PIPLINE).

Consider the following memory during the pipeline fetch cycle:

  ┌────┬────┐
  │abcd│ef01│ PIPELINE:
  └────┴────┘
   ↑(IP+0)
  ┌────┬────┐
  │abcd│ef01│ PIPELINE: 0xABCD
  └────┴────┘
        ↑(IP+1)
  ┌────┬────┐
  │abcd│ef01│ PIPELINE: 0xABCD, 0xEF01
  └────┴────┘
             ↑(IP+2)

Each fetch cycle ensures 2 values exist in the instruction pipeline.

After the pipeline is filled, the first value is pulled and used as instruction.
  0xABCD is popped from PIPELINE and stored in the Instruction Register

If applicable, the second value is pulled and used as immediate.
  0xEF01 is popped from PIPELINE and stored in immediate register IF S=11*

During next fetch cycle, if the immediate register is used, 2 words will
be loaded into the pipeline.

If the immediate was not used, only 1 word will be loaded into the pipline and
the last word fetched from the previous cycle will be used as the instruction.

*See Instruction Structure, Source Select for more detail.

┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈


Instruction Decoding
════════════════════════════════════════════════════════════════════════════════

Each instruction is a single 16 bit word. The single word can be used to preform
every operation of the EMU101 processor. The instruction is split into 6 parts.

  Instruction Word Structure
  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
  │W│A│A│C│C│C│C│C│S│S│D│D│D│J│J│J│ 
  └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘

   Symbol │ Description
  ────────┼───────────────────
     W    │ IO Select
     A    │ Address Select
     C    │ Computation Select
     S    │ Source Select
     D    │ Destination Select
     J    │ Condition Select


I/O Select
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Description: Sets Write Signal on the Data bus
Size: 1 bit
Symbol: W

   0 │ Result
  ───┼─────────
   0 │ Read
   1 │ Write


Address Select
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Description: Selects a register for address line output
Size: 2 bits
Symbol: A

   0 1 │ ADDR
  ─────┼─────────
   0 0 │ DP
   0 1 │ SP
   1 0 │ DP+D0
   1 1 │ SP+D0


Computation Select
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Description: Select the computation mode for the ALU
Size: 5 bits
Symbol: C

   0 1 2 3 4 │ Operation
  ───────────┼──────────
   0 0 0 0 0 │ D0-D0 (nop)
   0 0 0 0 1 │ D0-D1
   0 0 0 1 0 │ D0-D2
   0 0 0 1 1 │ D0
   0 0 1 0 0 │ D0+D0
   0 0 1 0 1 │ D0+D1
   0 0 1 1 0 │ D0+D2
   0 0 1 1 1 │ D1
   0 1 0 0 0 │ D0&D0
   0 1 0 0 1 │ D0&D1
   0 1 0 1 0 │ D0&D2
   0 1 0 1 1 │ D2
   0 1 1 0 0 │ D0|D0
   0 1 1 0 1 │ D0|D1
   0 1 1 1 0 │ D0|D2
   0 1 1 1 1 │ *roll(D0)
   1 0 0 0 0 │ D0^D0
   1 0 0 0 1 │ D0^D1
   1 0 0 1 0 │ D0^D2
   1 0 0 1 1 │ IP
   1 0 1 0 0 │ INC(D0)
   1 0 1 0 1 │ INC(D1)
   1 0 1 1 0 │ INC(D2)
   1 0 1 1 1 │ SP
   1 1 0 0 0 │ DEC(D0)
   1 1 0 0 1 │ DEC(D1)
   1 1 0 1 0 │ DEC(D2)
   1 1 0 1 1 │ DP
   1 1 1 0 0 │ NOT(D0)
   1 1 1 0 1 │ NOT(D1)
   1 1 1 1 0 │ NOT(D2)
   1 1 1 1 1 │ *rolr(D0)


Source Select
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Description: Select the data source
Size: 2 bits
Symbol: S

   0 1 │ SRC
  ─────┼─────────
   0 0 │ ZERO
   0 1 │ ALU
   1 0 │ DATA BUS
   1 1 │ IMMEDIATE


Destination Select
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Description: Select the destination register
Size: 3 bits
Symbol: D

   0 1 2 │ DST
  ───────┼─────────
   0 0 0 │ D0
   0 0 1 │ D1
   0 1 0 │ D2
   0 1 1 │ NOP
   1 0 0 │ IP
   1 0 1 │ SP
   1 1 0 │ DP
   1 1 1 │ NOP


Condition Select
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Description: Defines a Condition that must evaluate to true to store the result.
Size: 3 bits
Symbol: J

   0 1 2 │ Condition
  ───────┼─────────
   0 0 0 │ False
   0 0 1 │ LT
   0 1 0 │ EQ
   0 1 1 │ LE
   1 0 0 │ GT
   1 0 1 │ NE
   1 1 0 │ GE
   1 1 1 │ True

┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

Examples
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ┌────────────────────────────────────────────────────┐
  │ LDP - Load immediate into Data Pointer (DP)        │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 0 -- ----- 11 110 111     # - can be anything      │
  │ 0000 0000 1111 0111       # Assuming zero for -    │
  │ 0    0    F    7          # Convert to hex         │
  │ 0x00F7 -> LDP                                      │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ TD0D1 - Transfer D0 to D1                          │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 0 -- 00011 01 001 111                              │
  │ 0000 0011 0100 1111                                │
  │ 0    3    4    F                                   │
  │ 0x034F -> TD0D1                                    │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ WD0 - Write data from D0 to address in (DP)        │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 1 00 00011 00 111 111                              │
  │ 1000 0011 0011 1111                                │
  │ 8    3    3    F                                   │
  │ 0x833F -> WD0                                      │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ RD0 - Read data at (DP) and store in D0            │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 0 00 00000 10 000 111                              │
  │ 0000 0000 1000 0111                                │
  │ 0    0    8    7                                   │
  │ 0x0087 -> RD0                                      │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ D2=D0-D1; W - Compute D2 as D0-D1 and write to (DP)│
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 1 00 00001 01 010 111                              │
  │ 1000 0001 0101 0111                                │
  │ 8    1    5    7                                   │
  │ 0x8157 -> not sure what the mnemonic looks like.   │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ D0-D1; JGE [ADDR] - Jump to ADDR if D0 >= D1       │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 0 -- 00001 11 100 110                              │
  │ 1000 0001 1110 0110                                │
  │ A    1    D    6                                   │
  │ 0xA1D6 0xFFFC -> D0-D1; JGE 0xfffc                 │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ JSR [ADDR] - Jump to subroutine at ADDR            │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 1 01 10011 11 100 111                              │
  │ 1011 0011 1110 0111                                │
  │ B    3    D    7                                   │
  │ 0xB3D7 ?print -> JSR :print                        │
  └────────────────────────────────────────────────────┘

  ┌────────────────────────────────────────────────────┐
  │ PUSH D0|D2 - Push the result of (D1 OR D2)         │
  ┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
  │ 1 01 01110 00 111 111                              │
  │ 1010 1110 0011 1111                                │
  │ A    D    3    F                                   │
  │ 0xAD3F -> PUSH D0|D2                               │
  └────────────────────────────────────────────────────┘

